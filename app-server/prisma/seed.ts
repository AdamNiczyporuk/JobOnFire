import { ApplicationStatus, MeetingType, Prisma, PrismaClient, UserRole } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();

async function main(): Promise<void> {
  console.info("üå± Seeding database with extensive demo data...");
  console.info("üë• Creating: 2 Employers + 2 Candidates with full interactions");

  // Clean up old seed data before re-seeding
  console.info("üßπ Cleaning previous seed data...");
  await prisma.candidateAnswer.deleteMany();
  await prisma.applicationResponse.deleteMany();
  await prisma.meeting.deleteMany();
  await prisma.applicationForJobOffer.deleteMany();
  await prisma.recruitmentQuestion.deleteMany();
  await prisma.jobOffer.deleteMany();
  await prisma.lokalizationToEmployerProfile.deleteMany();
  await prisma.employerProfile.deleteMany();
  await prisma.candidateCV.deleteMany();
  await prisma.profileLink.deleteMany();
  await prisma.externalJobOffer.deleteMany();
  await prisma.candidateProfile.deleteMany();
  await prisma.additionalCredentials.deleteMany();
  await prisma.lokalization.deleteMany();
  await prisma.user.deleteMany({ where: { email: { endsWith: "@jobonfire.com" } } });
  console.info("‚úÖ Cleanup complete\n");

  const passwordHash = await bcrypt.hash("Demo123!", 10);

  // ============================================
  // EMPLOYER 1: FireTech Software
  // ============================================
  console.info("üëî Creating Employer 1: FireTech Software...");
  
  const employer1User = await prisma.user.create({
    data: {
      username: "firetech",
      email: "employer1@jobonfire.com",
      passwordHash,
      role: UserRole.EMPLOYER,
      registerDate: new Date(),
      isDeleted: false,
    },
  });

  const employer1Profile = await prisma.employerProfile.create({
    data: {
      companyName: "FireTech Software",
      companyImageUrl: "https://cdn.jobonfire.dev/logos/firetech.png",
      industry: ["Software", "IT Services"] as Prisma.JsonArray,
      description: "Nowoczesny software house budujƒÖcy aplikacje webowe i mobilne dla bran≈ºy fintech, e-commerce oraz HR.",
      contractType: ["Umowa o pracƒô", "B2B"] as Prisma.JsonArray,
      contactPhone: "+48 511 223 344",
      contactEmail: "hr@firetech.pl",
      benefits: ["Prywatna opieka medyczna", "Bud≈ºet szkoleniowy", "Praca hybrydowa", "Karta sportowa"] as Prisma.JsonArray,
      userId: employer1User.id,
    },
  });

  // Locations for Employer 1
  const warsawOffice = await prisma.lokalization.create({
    data: {
      city: "Warszawa",
      state: "Mazowieckie",
      street: "Prosta 51",
      postalCode: "00-838",
      latitude: 52.2318,
      longtitude: 20.9965,
    },
  });

  await prisma.lokalizationToEmployerProfile.create({
    data: {
      employerProfileId: employer1Profile.id,
      lokalizationId: warsawOffice.id,
    },
  });

  // Job Offers for Employer 1
  const frontendOffer = await prisma.jobOffer.create({
    data: {
      name: "Frontend Developer (React/Next.js)",
      description: "Do≈ÇƒÖcz do zespo≈Çu FireTech Software i rozwijaj rozwiƒÖzania webowe dla klient√≥w z ca≈Çego ≈õwiata.",
      jobLevel: ["Mid", "Senior"] as Prisma.JsonArray,
      contractType: "B2B",
      salary: "18 000 - 24 000 PLN netto (B2B)",
      createDate: new Date(),
      expireDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000),
      workingMode: ["Hybrydowa", "Zdalna"] as Prisma.JsonArray,
      workload: "Pe≈Çny etat",
      responsibilities: [
        "Rozw√≥j i utrzymanie aplikacji frontendowych w oparciu o Next.js i TypeScript",
        "≈öcis≈Ça wsp√≥≈Çpraca z zespo≈Çem UX/UI oraz backend",
        "Dbanie o jako≈õƒá kodu i pokrycie testami automatycznymi",
        "Optymalizacja wydajno≈õciowo-SEO istniejƒÖcych modu≈Ç√≥w",
      ] as Prisma.JsonArray,
      requirements: [
        "Min. 3 lata do≈õwiadczenia komercyjnego w React/Next.js",
        "Bardzo dobra znajomo≈õƒá TypeScript",
        "Umiejƒôtno≈õƒá pracy z REST API i GraphQL",
        "Do≈õwiadczenie z testami (Jest, React Testing Library)",
      ] as Prisma.JsonArray,
      whatWeOffer: [
        "Wynagrodzenie 18 000 - 24 000 PLN netto + VAT",
        "Bud≈ºet szkoleniowy 5 000 PLN rocznie",
        "Nowoczesne biuro w centrum Warszawy",
        "Elastyczne godziny pracy oraz mo≈ºliwo≈õƒá pracy zdalnej",
      ] as Prisma.JsonArray,
      applicationUrl: null,
      tags: ["React", "Next.js", "TypeScript", "CI/CD", "GraphQL"] as Prisma.JsonArray,
      isActive: true,
      lokalizationId: warsawOffice.id,
      employerProfileId: employer1Profile.id,
    },
  });

  const backendOffer = await prisma.jobOffer.create({
    data: {
      name: "Backend Developer (Node.js)",
      description: "Szukamy backend developera do pracy nad systemami dla bran≈ºy fintech.",
      jobLevel: ["Senior"] as Prisma.JsonArray,
      contractType: "B2B",
      salary: "20 000 - 26 000 PLN netto (B2B)",
      createDate: new Date(),
      expireDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),
      workingMode: ["Zdalna"] as Prisma.JsonArray,
      workload: "Pe≈Çny etat",
      responsibilities: [
        "Projektowanie i implementacja REST API",
        "Integracja z systemami p≈Çatno≈õci",
        "Optymalizacja wydajno≈õci bazy danych",
      ] as Prisma.JsonArray,
      requirements: [
        "Min. 5 lat do≈õwiadczenia w Node.js",
        "Znajomo≈õƒá PostgreSQL i Redis",
        "Do≈õwiadczenie z mikrous≈Çugami",
      ] as Prisma.JsonArray,
      whatWeOffer: [
        "100% praca zdalna",
        "Nowoczesny stack technologiczny",
        "Bud≈ºet na konferencje",
      ] as Prisma.JsonArray,
      applicationUrl: null,
      tags: ["Node.js", "PostgreSQL", "Microservices", "REST API"] as Prisma.JsonArray,
      isActive: true,
      lokalizationId: warsawOffice.id,
      employerProfileId: employer1Profile.id,
    },
  });

  // Recruitment questions for Frontend offer
  await prisma.recruitmentQuestion.createMany({
    data: [
      {
        jobOfferId: frontendOffer.id,
        question: "Opisz swoje najwiƒôksze wyzwanie projektowe zwiƒÖzane z wydajno≈õciƒÖ frontendu.",
      },
      {
        jobOfferId: frontendOffer.id,
        question: "Jakie narzƒôdzia wykorzystujesz do monitorowania jako≈õci aplikacji React?",
      },
    ],
  });

  // Recruitment questions for Backend offer
  await prisma.recruitmentQuestion.createMany({
    data: [
      {
        jobOfferId: backendOffer.id,
        question: "Jakie wzorce projektowe stosujesz przy tworzeniu mikrous≈Çug?",
      },
      {
        jobOfferId: backendOffer.id,
        question: "Opisz swoje do≈õwiadczenie z optymalizacjƒÖ zapyta≈Ñ SQL.",
      },
    ],
  });

  console.info("‚úÖ Employer 1 created with 2 job offers\n");

  // ============================================
  // EMPLOYER 2: DataForge Analytics
  // ============================================
  console.info("üëî Creating Employer 2: DataForge Analytics...");

  const employer2User = await prisma.user.create({
    data: {
      username: "dataforge",
      email: "employer2@jobonfire.com",
      passwordHash,
      role: UserRole.EMPLOYER,
      registerDate: new Date(),
      isDeleted: false,
    },
  });

  const employer2Profile = await prisma.employerProfile.create({
    data: {
      companyName: "DataForge Analytics",
      companyImageUrl: "https://cdn.jobonfire.dev/logos/dataforge.png",
      industry: ["Analityka danych", "Cloud"] as Prisma.JsonArray,
      description: "Tworzymy rozwiƒÖzania analityczne w oparciu o Azure i ekosystem danych.",
      contractType: ["Umowa o pracƒô", "B2B"] as Prisma.JsonArray,
      contactPhone: "+48 600 112 233",
      contactEmail: "kariera@dataforge.pl",
      benefits: ["Bud≈ºet konferencyjny", "Elastyczne godziny pracy", "Ubezpieczenie na ≈ºycie", "Program mentorski"] as Prisma.JsonArray,
      userId: employer2User.id,
    },
  });

  const krakowOffice = await prisma.lokalization.create({
    data: {
      city: "Krak√≥w",
      state: "Ma≈Çopolskie",
      street: "Lubicz 17G",
      postalCode: "31-503",
      latitude: 50.0665,
      longtitude: 19.9601,
    },
  });

  await prisma.lokalizationToEmployerProfile.create({
    data: {
      employerProfileId: employer2Profile.id,
      lokalizationId: krakowOffice.id,
    },
  });

  const dataEngineerOffer = await prisma.jobOffer.create({
    data: {
      name: "Data Engineer (Azure)",
      description: "Poszukujemy Data Engineera do zespo≈Çu projektujƒÖcego rozwiƒÖzania danych na platformie Azure.",
      jobLevel: ["Mid", "Senior"] as Prisma.JsonArray,
      contractType: "B2B",
      salary: "20 000 - 26 000 PLN netto (B2B)",
      createDate: new Date(),
      expireDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),
      workingMode: ["Hybrydowa"] as Prisma.JsonArray,
      workload: "Pe≈Çny etat",
      responsibilities: [
        "Projektowanie i implementacja pipeline'√≥w danych w Azure Data Factory",
        "Modelowanie hurtowni danych",
        "Automatyzacja proces√≥w CI/CD",
      ] as Prisma.JsonArray,
      requirements: [
        "Min. 3 lata do≈õwiadczenia w projektach danych",
        "Bardzo dobra znajomo≈õƒá Azure Data Platform",
        "Umiejƒôtno≈õƒá programowania w Python lub Scala",
      ] as Prisma.JsonArray,
      whatWeOffer: [
        "Praca z miƒôdzynarodowymi klientami",
        "Bud≈ºet szkoleniowy 6 000 PLN rocznie",
        "Mo≈ºliwo≈õƒá pracy z najnowszym stackiem Azure",
      ] as Prisma.JsonArray,
      applicationUrl: null,
      tags: ["Azure", "Data Lake", "PySpark", "SQL"] as Prisma.JsonArray,
      isActive: true,
      lokalizationId: krakowOffice.id,
      employerProfileId: employer2Profile.id,
    },
  });

  const biDeveloperOffer = await prisma.jobOffer.create({
    data: {
      name: "BI Developer (Power BI)",
      description: "Szukamy osoby do budowy interaktywnych raport√≥w Power BI dla klient√≥w z bran≈ºy retail.",
      jobLevel: ["Mid"] as Prisma.JsonArray,
      contractType: "Umowa o pracƒô",
      salary: "16 000 - 19 000 PLN brutto",
      createDate: new Date(),
      expireDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000),
      workingMode: ["Hybrydowa"] as Prisma.JsonArray,
      workload: "Pe≈Çny etat",
      responsibilities: [
        "Projektowanie modeli danych w Power BI",
        "Tworzenie raport√≥w i dashboard√≥w",
        "Optymalizacja rozwiƒÖza≈Ñ i wsparcie u≈ºytkownik√≥w",
      ] as Prisma.JsonArray,
      requirements: [
        "Do≈õwiadczenie w pracy z Power BI i DAX",
        "Bardzo dobra znajomo≈õƒá SQL",
        "Znajomo≈õƒá proces√≥w ETL",
      ] as Prisma.JsonArray,
      whatWeOffer: [
        "Stabilna wsp√≥≈Çpraca",
        "Prywatna opieka medyczna",
        "Zesp√≥≈Ç ekspert√≥w",
      ] as Prisma.JsonArray,
      applicationUrl: null,
      tags: ["Power BI", "DAX", "SQL"] as Prisma.JsonArray,
      isActive: true,
      lokalizationId: krakowOffice.id,
      employerProfileId: employer2Profile.id,
    },
  });

  // Recruitment questions for Data Engineer
  await prisma.recruitmentQuestion.createMany({
    data: [
      {
        jobOfferId: dataEngineerOffer.id,
        question: "Opisz swoje do≈õwiadczenie z Azure Data Factory.",
      },
      {
        jobOfferId: dataEngineerOffer.id,
        question: "Jak podchodzisz do optymalizacji pipeline'√≥w danych?",
      },
    ],
  });

  console.info("‚úÖ Employer 2 created with 2 job offers\n");

  // ============================================
  // CANDIDATE 1: Anna Nowak
  // ============================================
  console.info("üë§ Creating Candidate 1: Anna Nowak...");

  const candidate1User = await prisma.user.create({
    data: {
      username: "frontendhero",
      email: "candidate1@jobonfire.com",
      passwordHash,
      role: UserRole.CANDIDATE,
      registerDate: new Date(),
      isDeleted: false,
    },
  });

  // Google OAuth credentials for candidate 1
  await prisma.additionalCredentials.create({
    data: {
      userId: candidate1User.id,
      provider: "google",
      value: "google-oauth-id-anna-123",
    },
  });

  const candidate1Profile = await prisma.candidateProfile.create({
    data: {
      name: "Anna",
      lastName: "Nowak",
      description: "Frontend Developer z 5-letnim do≈õwiadczeniem w budowaniu aplikacji webowych. Specjalizujƒô siƒô w ekosystemie React.",
      birthday: new Date("1994-08-14"),
      experience: [
        {
          company: "CodeWave",
          position: "Frontend Developer",
          startDate: "2021-02-01",
          endDate: "2023-07-31",
          isCurrent: false,
          description: "Implementacja modu≈Ç√≥w w React i Next.js, wsp√≥≈Çpraca z zespo≈Çem backendowym.",
          location: "Warszawa",
        },
        {
          company: "BrightApps",
          position: "Junior Frontend Developer",
          startDate: "2019-05-01",
          endDate: "2021-01-31",
          isCurrent: false,
          description: "Budowa komponent√≥w UI, optymalizacja wydajno≈õci.",
          location: "Krak√≥w",
        },
      ] as Prisma.JsonArray,
      phoneNumber: 481112233,
      skills: [
        { name: "React", level: "EXPERT" },
        { name: "Next.js", level: "EXPERT" },
        { name: "TypeScript", level: "ADVANCED" },
        { name: "GraphQL", level: "ADVANCED" },
        { name: "Jest", level: "ADVANCED" },
      ] as Prisma.JsonArray,
      place: "Warszawa",
      education: [
        {
          institution: "Politechnika Warszawska",
          degree: "Magister",
          fieldOfStudy: "Informatyka",
          startDate: "2014-10-01",
          endDate: "2019-06-30",
          isCurrent: false,
          description: "Specjalizacja: In≈ºynieria Oprogramowania",
          location: "Warszawa",
        },
      ] as Prisma.JsonArray,
      userId: candidate1User.id,
    },
  });

  // Profile links for candidate 1
  await prisma.profileLink.createMany({
    data: [
      {
        name: "GitHub",
        url: "https://github.com/frontendhero",
        candidateProfileId: candidate1Profile.id,
      },
      {
        name: "LinkedIn",
        url: "https://linkedin.com/in/anna-nowak-frontend",
        candidateProfileId: candidate1Profile.id,
      },
      {
        name: "Portfolio",
        url: "https://anna-nowak.dev",
        candidateProfileId: candidate1Profile.id,
      },
    ],
  });

  // External job offers tracked by candidate 1
  await prisma.externalJobOffer.createMany({
    data: [
      {
        url: "https://justjoin.it/offers/react-developer-123",
        site: "JustJoinIT",
        name: "React Developer",
        company: "TechCorp",
        candidateProfileId: candidate1Profile.id,
      },
      {
        url: "https://nofluffjobs.com/pl/job/senior-frontend",
        site: "NoFluffJobs",
        name: "Senior Frontend Engineer",
        company: "StartupXYZ",
        candidateProfileId: candidate1Profile.id,
      },
    ],
  });

  // CVs for candidate 1
  const candidate1CV1 = await prisma.candidateCV.create({
    data: {
      name: "Frontend CV - FireTech",
      cvJson: JSON.stringify({
        fullName: "Anna Nowak",
        position: "Frontend Developer",
        summary: "Do≈õwiadczona frontend developerka specjalizujƒÖca siƒô w React i Next.js.",
        skills: ["React", "Next.js", "TypeScript", "GraphQL", "Jest"],
        experience: ["CodeWave - Frontend Developer", "BrightApps - Junior Frontend Developer"],
        education: ["Politechnika Warszawska - Informatyka, Magister"],
      }),
      candidateProfileId: candidate1Profile.id,
      isDeleted: false,
    },
  });

  const candidate1CV2 = await prisma.candidateCV.create({
    data: {
      name: "Uniwersalne CV",
      cvJson: JSON.stringify({
        fullName: "Anna Nowak",
        position: "Full Stack Developer",
        summary: "Wszechstronna developerka z do≈õwiadczeniem frontend i podstawami backend.",
        skills: ["React", "Next.js", "TypeScript", "Node.js", "PostgreSQL"],
        experience: ["CodeWave", "BrightApps"],
        education: ["Politechnika Warszawska - Informatyka"],
      }),
      candidateProfileId: candidate1Profile.id,
      isDeleted: false,
    },
  });

  console.info("‚úÖ Candidate 1 created with 2 CVs and profile links\n");

  // ============================================
  // CANDIDATE 2: Piotr Kowalski
  // ============================================
  console.info("üë§ Creating Candidate 2: Piotr Kowalski...");

  const candidate2User = await prisma.user.create({
    data: {
      username: "dataengineer",
      email: "candidate2@jobonfire.com",
      passwordHash,
      role: UserRole.CANDIDATE,
      registerDate: new Date(),
      isDeleted: false,
    },
  });

  const candidate2Profile = await prisma.candidateProfile.create({
    data: {
      name: "Piotr",
      lastName: "Kowalski",
      description: "Data Engineer z 4-letnim do≈õwiadczeniem w projektach Azure i AWS. Pasjonat automatyzacji i big data.",
      birthday: new Date("1992-03-22"),
      experience: [
        {
          company: "CloudData Solutions",
          position: "Data Engineer",
          startDate: "2021-01-01",
          endDate: null,
          isCurrent: true,
          description: "Projektowanie pipeline'√≥w ETL na Azure, integracja z Power BI.",
          location: "Krak√≥w",
        },
        {
          company: "Analytics Pro",
          position: "Junior Data Analyst",
          startDate: "2019-06-01",
          endDate: "2020-12-31",
          isCurrent: false,
          description: "Analiza danych biznesowych, tworzenie raport√≥w SQL.",
          location: "Warszawa",
        },
      ] as Prisma.JsonArray,
      phoneNumber: 485556677,
      skills: [
        { name: "Azure", level: "EXPERT" },
        { name: "Python", level: "EXPERT" },
        { name: "SQL", level: "ADVANCED" },
        { name: "PySpark", level: "ADVANCED" },
        { name: "Power BI", level: "INTERMEDIATE" },
        { name: "Databricks", level: "ADVANCED" },
      ] as Prisma.JsonArray,
      place: "Krak√≥w",
      education: [
        {
          institution: "AGH Krak√≥w",
          degree: "In≈ºynier",
          fieldOfStudy: "Informatyka i Ekonometria",
          startDate: "2015-10-01",
          endDate: "2019-06-30",
          isCurrent: false,
          description: null,
          location: "Krak√≥w",
        },
      ] as Prisma.JsonArray,
      userId: candidate2User.id,
    },
  });

  // Profile links for candidate 2
  await prisma.profileLink.createMany({
    data: [
      {
        name: "GitHub",
        url: "https://github.com/piotrkowalski",
        candidateProfileId: candidate2Profile.id,
      },
      {
        name: "LinkedIn",
        url: "https://linkedin.com/in/piotr-kowalski-data",
        candidateProfileId: candidate2Profile.id,
      },
    ],
  });

  // CVs for candidate 2
  const candidate2CV1 = await prisma.candidateCV.create({
    data: {
      name: "Data Engineer CV",
      cvJson: JSON.stringify({
        fullName: "Piotr Kowalski",
        position: "Data Engineer",
        summary: "Do≈õwiadczony data engineer z focus na Azure i automatyzacjƒô.",
        skills: ["Azure", "Python", "SQL", "PySpark", "Databricks"],
        experience: ["CloudData Solutions - Data Engineer", "Analytics Pro - Junior Data Analyst"],
        education: ["AGH Krak√≥w - Informatyka i Ekonometria"],
      }),
      candidateProfileId: candidate2Profile.id,
      isDeleted: false,
    },
  });

  const candidate2CV2 = await prisma.candidateCV.create({
    data: {
      name: "BI Developer CV",
      cvJson: JSON.stringify({
        fullName: "Piotr Kowalski",
        position: "BI Developer",
        summary: "Specjalista od danych z do≈õwiadczeniem w Power BI i SQL.",
        skills: ["Power BI", "SQL", "DAX", "Python"],
        experience: ["CloudData Solutions", "Analytics Pro"],
        education: ["AGH Krak√≥w"],
      }),
      candidateProfileId: candidate2Profile.id,
      isDeleted: false,
    },
  });

  console.info("‚úÖ Candidate 2 created with 2 CVs\n");

  // ============================================
  // APPLICATIONS - Candidate 1 (Anna)
  // ============================================
  console.info("üìù Creating applications for Candidate 1...");

  // Application 1: Anna -> FireTech Frontend (PENDING)
  const app1 = await prisma.applicationForJobOffer.create({
    data: {
      message: "Cze≈õƒá! Mam du≈ºe do≈õwiadczenie w Next.js i budowaniu skalowalnych frontend√≥w. Chƒôtnie opowiem wiƒôcej podczas rozmowy.",
      status: ApplicationStatus.PENDING,
      candidateProfileId: candidate1Profile.id,
      jobOfferId: frontendOffer.id,
      cvId: candidate1CV1.id,
      createDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
    },
  });

  // Get recruitment questions for frontend offer
  const frontendQuestions = await prisma.recruitmentQuestion.findMany({
    where: { jobOfferId: frontendOffer.id },
  });

  // Answer to recruitment questions
  if (frontendQuestions.length > 0) {
    await prisma.candidateAnswer.create({
      data: {
        applicationForJobOfferId: app1.id,
        recruitmentQuestionId: frontendQuestions[0].id,
        answer: "Najwiƒôkszym wyzwaniem by≈Ço zoptymalizowanie renderowania listy 10000+ element√≥w. U≈ºy≈Çam React Window i memoizacji.",
      },
    });

    if (frontendQuestions.length > 1) {
      await prisma.candidateAnswer.create({
        data: {
          applicationForJobOfferId: app1.id,
          recruitmentQuestionId: frontendQuestions[1].id,
          answer: "U≈ºywam kombinacji ESLint, Prettier, Lighthouse CI i Sentry do monitorowania jako≈õci.",
        },
      });
    }
  }

  // Meeting for this application
  await prisma.meeting.create({
    data: {
      applicationForJobOfferId: app1.id,
      dateTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
      type: MeetingType.ONLINE,
      contributors: "Anna Nowak, Piotr Kowalski (Recruiter), Jan Nowak (Tech Lead)",
      onlineMeetingUrl: "https://meet.jobonfire.com/frontend-interview-anna",
      message: "Wstƒôpna rozmowa techniczna ‚Äì sprawdzenie dopasowania i do≈õwiadczenia. Przygotuj siƒô na live coding.",
    },
  });

  // Application 2: Anna -> DataForge BI Developer (REJECTED)
  const app2 = await prisma.applicationForJobOffer.create({
    data: {
      message: "Zainteresowana pozycjƒÖ BI Developer. Chocia≈º specjalizujƒô siƒô w frontendzie, chcia≈Çabym rozwijaƒá siƒô w kierunku data viz.",
      status: ApplicationStatus.REJECTED,
      candidateProfileId: candidate1Profile.id,
      jobOfferId: biDeveloperOffer.id,
      cvId: candidate1CV2.id,
      createDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago
    },
  });

  await prisma.applicationResponse.create({
    data: {
      applicationForJobOfferId: app2.id,
      response: "Dziƒôkujemy za aplikacjƒô. Niestety poszukujemy osoby z wiƒôkszym do≈õwiadczeniem w Power BI i analizie danych.",
    },
  });

  console.info("‚úÖ 2 applications created for Candidate 1\n");

  // ============================================
  // APPLICATIONS - Candidate 2 (Piotr)
  // ============================================
  console.info("üìù Creating applications for Candidate 2...");

  // Application 3: Piotr -> DataForge Data Engineer (ACCEPTED)
  const app3 = await prisma.applicationForJobOffer.create({
    data: {
      message: "Witam! Pracujƒô obecnie jako Data Engineer z Azure. Mam do≈õwiadczenie z Data Factory, Databricks i PySpark. Chƒôtnie do≈ÇƒÖczƒô do Waszego zespo≈Çu.",
      status: ApplicationStatus.ACCEPTED,
      candidateProfileId: candidate2Profile.id,
      jobOfferId: dataEngineerOffer.id,
      cvId: candidate2CV1.id,
      createDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago
    },
  });

  const dataEngineerQuestions = await prisma.recruitmentQuestion.findMany({
    where: { jobOfferId: dataEngineerOffer.id },
  });

  if (dataEngineerQuestions.length > 0) {
    await prisma.candidateAnswer.create({
      data: {
        applicationForJobOfferId: app3.id,
        recruitmentQuestionId: dataEngineerQuestions[0].id,
        answer: "Pracujƒô z ADF od 2 lat. Stworzy≈Çem ponad 30 pipeline'√≥w dla r√≥≈ºnych ≈∫r√≥de≈Ç danych - od SQL Server po REST API.",
      },
    });

    if (dataEngineerQuestions.length > 1) {
      await prisma.candidateAnswer.create({
        data: {
          applicationForJobOfferId: app3.id,
          recruitmentQuestionId: dataEngineerQuestions[1].id,
          answer: "Skupiam siƒô na partycjonowaniu danych, incremental load, oraz monitoringu koszt√≥w i czasu wykonania.",
        },
      });
    }
  }

  await prisma.applicationResponse.create({
    data: {
      applicationForJobOfferId: app3.id,
      response: "Gratulacje! Twoja aplikacja zosta≈Ça zaakceptowana. Skontaktujemy siƒô w sprawie dalszych krok√≥w.",
    },
  });

  // Meetings for accepted application
  await prisma.meeting.createMany({
    data: [
      {
        applicationForJobOfferId: app3.id,
        dateTime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
        type: MeetingType.ONLINE,
        contributors: "Piotr Kowalski, Marek Nowak (HR)",
        onlineMeetingUrl: "https://meet.dataforge.pl/interview-piotr-1",
        message: "Pierwsza rozmowa - om√≥wienie do≈õwiadczenia i oczekiwa≈Ñ.",
      },
      {
        applicationForJobOfferId: app3.id,
        dateTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now
        type: MeetingType.OFFLINE,
        contributors: "Piotr Kowalski, Team Lead, Senior Data Engineer",
        onlineMeetingUrl: null,
        message: "Spotkanie w biurze - om√≥wienie warunk√≥w wsp√≥≈Çpracy i poznanie zespo≈Çu.",
      },
    ],
  });

  // Application 4: Piotr -> FireTech Backend (PENDING)
  const app4 = await prisma.applicationForJobOffer.create({
    data: {
      message: "Interesujƒô siƒô r√≥wnie≈º rozwojem w kierunku backend. Mam do≈õwiadczenie z Node.js i PostgreSQL z projekt√≥w osobistych.",
      status: ApplicationStatus.PENDING,
      candidateProfileId: candidate2Profile.id,
      jobOfferId: backendOffer.id,
      cvId: candidate2CV1.id,
      createDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
    },
  });

  const backendQuestions = await prisma.recruitmentQuestion.findMany({
    where: { jobOfferId: backendOffer.id },
  });

  if (backendQuestions.length > 0) {
    await prisma.candidateAnswer.create({
      data: {
        applicationForJobOfferId: app4.id,
        recruitmentQuestionId: backendQuestions[0].id,
        answer: "Stosujƒô CQRS, Event Sourcing oraz Repository Pattern. W projektach osobistych u≈ºywam r√≥wnie≈º Clean Architecture.",
      },
    });
  }

  // Application 5: Piotr -> FireTech Frontend (CANCELED by candidate)
  await prisma.applicationForJobOffer.create({
    data: {
      message: "Chcia≈Çbym spr√≥bowaƒá swoich si≈Ç r√≥wnie≈º w frontendzie, mam podstawy React.",
      status: ApplicationStatus.CANCELED,
      candidateProfileId: candidate2Profile.id,
      jobOfferId: frontendOffer.id,
      cvId: candidate2CV1.id,
      createDate: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000), // 8 days ago
    },
  });

  console.info("‚úÖ 3 applications created for Candidate 2\n");

  // ============================================
  // SUMMARY
  // ============================================
  console.info("=" .repeat(60));
  console.info("‚úÖ SEEDING COMPLETED SUCCESSFULLY!");
  console.info("=" .repeat(60));
  console.info("\nüìä Summary:");
  console.info("  üëî Employers: 2");
  console.info("     - FireTech Software (2 job offers)");
  console.info("     - DataForge Analytics (2 job offers)");
  console.info("  üë§ Candidates: 2");
  console.info("     - Anna Nowak (2 CVs, 2 applications)");
  console.info("     - Piotr Kowalski (2 CVs, 3 applications)");
  console.info("  üìç Locations: 2 (Warszawa, Krak√≥w)");
  console.info("  üíº Job Offers: 4");
  console.info("  üìù Applications: 5");
  console.info("     - PENDING: 2");
  console.info("     - ACCEPTED: 1");
  console.info("     - REJECTED: 1");
  console.info("     - CANCELED: 1");
  console.info("  üìÖ Meetings: 3");
  console.info("  üîó Profile Links: 5");
  console.info("  üìÑ External Job Offers: 2");
  console.info("  ‚ùì Recruitment Questions: 6");
  console.info("  üí¨ Candidate Answers: 6");
  console.info("  üìß Application Responses: 2");
  console.info("\nüîê Login credentials (all users):");
  console.info("  Password: Demo123!");
  console.info("  Emails:");
  console.info("    - employer1@jobonfire.com (FireTech)");
  console.info("    - employer2@jobonfire.com (DataForge)");
  console.info("    - candidate1@jobonfire.com (Anna Nowak)");
  console.info("    - candidate2@jobonfire.com (Piotr Kowalski)");
  console.info("=" .repeat(60));
}

main()
  .catch((error: unknown) => {
    console.error("‚ùå Seeding failed:", error);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
