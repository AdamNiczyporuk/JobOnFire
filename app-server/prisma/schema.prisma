generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}
enum UserRole {
  CANDIDATE
  EMPLOYER
}
enum MeetingType {
  ONLINE
  OFFLINE
}

model user {
  id              Int      @id @default(autoincrement())
  username        String @unique
  email           String @unique
  passwordHash    String?
  role            UserRole
  registerDate    DateTime
  isDeleted       Boolean

  candidateProfile        candidateProfile?
  employerProfile         employerProfile?
  additionalCredentials   additionalCredentials?
}

model additionalCredentials {
  userId   Int    @id @unique
  provider String
  value    String

  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model candidateProfile {
  id             Int      @id @default(autoincrement())
  name           String?
  lastName       String?
  description    String?
  birthday       DateTime?
  experience     Json?
  phoneNumber    Int?
  skills         Json?
  place          String?
  education      Json?
  userId         Int      @unique

  user                user                  @relation(fields: [userId], references: [id])
  candidateCVs        candidateCV[]
  externalJobOffers   externalJobOffer[]
  applications        applicationForJobOffer[]
  profileLinks        profileLink[]
}

model employerProfile {
  id              Int      @id @default(autoincrement())
  companyName     String
  companyImageUrl String?
  industry        Json?
  description     String?
  contractType    Json? 
  contactPhone    String?
  contactEmail    String?
  benefits        Json?
  userId          Int      @unique

  user           user                           @relation(fields: [userId], references: [id])
  jobOffers      jobOffer[]
  lokalizations  lokalizationToEmployerProfile[]
}

model candidateCV {
  id                  Int      @id @default(autoincrement())
  cvJson              String?
  candidateProfileId  Int
  cvUrl               String?
  name                String?
  isDeleted           Boolean  @default(false)

  candidateProfile    candidateProfile          @relation(fields: [candidateProfileId], references: [id])
  applications        applicationForJobOffer[]  @relation("CandidateCV")
}

model externalJobOffer {
  id                  Int    @id @default(autoincrement())
  url                 String
  site                String?
  name                String
  company             String?
  candidateProfileId  Int

  candidateProfile    candidateProfile @relation(fields: [candidateProfileId], references: [id])
}

model applicationForJobOffer {
  id                  Int     @id @default(autoincrement())
  message             String?
  status              ApplicationStatus
  createDate          DateTime @default(now())
  candidateProfileId  Int
  jobOfferId          Int
  cvId                Int

  candidateProfile    candidateProfile         @relation(fields: [candidateProfileId], references: [id])
  jobOffer            jobOffer                 @relation(fields: [jobOfferId], references: [id])
  candidateCV         candidateCV              @relation("CandidateCV", fields: [cvId], references: [id])
  response            applicationResponse?
  answers             candidateAnswer[]
  meetings            meeting[]
}

model applicationResponse {
  applicationForJobOfferId Int @id
  response                 String?

  application applicationForJobOffer @relation(fields: [applicationForJobOfferId], references: [id])
}

model candidateAnswer {
  applicationForJobOfferId Int
  recruitmentQuestionId    Int
  answer                   String?

  application  applicationForJobOffer @relation(fields: [applicationForJobOfferId], references: [id])
  question     recruitmentQuestion    @relation(fields: [recruitmentQuestionId], references: [id])

  @@id([applicationForJobOfferId, recruitmentQuestionId])
}

model jobOffer {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  jobLevel          Json?
  contractType      String?
  salary            String?
  createDate        DateTime
  expireDate        DateTime
  workingMode       Json?
  workload          String?
  responsibilities  Json?
  requirements      Json?
  whatWeOffer       Json?
  applicationUrl    String?
  tags              Json?
  isActive         Boolean
  lokalizationId    Int?
  employerProfileId Int

  employerProfile   employerProfile        @relation(fields: [employerProfileId], references: [id])
  lokalization      lokalization?           @relation(fields: [lokalizationId], references: [id])
  applications      applicationForJobOffer[]
  questions         recruitmentQuestion[]
  recruitmentTest   recruitmentTest?
}

model lokalization {
  id         Int     @id @default(autoincrement())
  city       String?
  state      String?
  street     String?
  postalCode String?
  latitude   Float?
  longtitude Float?

  jobOffers  jobOffer[]
  employers  lokalizationToEmployerProfile[]
}

model lokalizationToEmployerProfile {
  employerProfileId Int
  lokalizationId    Int

  employer     employerProfile @relation(fields: [employerProfileId], references: [id])
  lokalization lokalization     @relation(fields: [lokalizationId], references: [id])

  @@id([employerProfileId, lokalizationId])
}

model meeting {
  id                       Int      @id @default(autoincrement())
  dateTime                 DateTime
  type                     MeetingType
  contributors             String?
  onlineMeetingUrl         String?
  message                  String?
  applicationForJobOfferId Int

  application applicationForJobOffer @relation(fields: [applicationForJobOfferId], references: [id])
}

model profileLink {
  id                 Int    @id @default(autoincrement())
  name               String
  url                String
  candidateProfileId Int

  candidateProfile candidateProfile @relation(fields: [candidateProfileId], references: [id])
}

model recruitmentQuestion {
  id         Int    @id @default(autoincrement())
  question   String?
  jobOfferId Int

  jobOffer jobOffer          @relation(fields: [jobOfferId], references: [id])
  answers  candidateAnswer[]
}

model recruitmentTest {
  id         Int    @id @default(autoincrement())
  testJson   Json?
  jobOfferId Int @unique

  jobOffer jobOffer @relation(fields: [jobOfferId], references: [id]) 
}