generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String
  passwordhash String
  role         String
  registerdate DateTime
  isdeleted    Boolean

  candidateProfile CandidateProfile?
  employerProfile  EmployerProfile?
  additionalCredentials AdditionalCredentials[]
}

model AdditionalCredentials {
  userid   Int    @id
  provider String?
  value    String?

  user     User   @relation(fields: [userid], references: [id])
}

model CandidateProfile {
  id          Int      @id @default(autoincrement())
  name        String?
  lastname    String?
  description String?
  birthday    DateTime?
  experience  String?
  phonenumber Int?
  skills      String?
  place       String?
  education   String?
  userid      Int      @unique

  user         User    @relation(fields: [userid], references: [id])
  candidateCVs CandidateCV[]
  externalJobOffers ExternalJobOffer[]
  applications ApplicationForJobOffer[]
  profileLinks ProfileLink[]
}

model EmployerProfile {
  id              Int      @id @default(autoincrement())
  companyname     String?
  companyimageurl String?
  industry        String?
  description     String?
  contracttype    String?
  contactphone    String?
  contactemail    String?
  benefits        String?
  userid          Int      @unique

  user         User     @relation(fields: [userid], references: [id])
  jobOffers    JobOffer[]
  lokalizations LokalizationToEmployerProfile[]
}

model CandidateCV {
  id                 Int      @id @default(autoincrement())
  cvjson             String?
  candidateprofileid Int
  cvurl              String?
  name               String?

  candidateProfile CandidateProfile @relation(fields: [candidateprofileid], references: [id])
  applications      ApplicationForJobOffer[] @relation("GeneratedCV")
}

model ExternalJobOffer {
  id                 Int    @id @default(autoincrement())
  url                String
  site               String?
  name               String
  company            String?
  candidateprofileid Int

  candidateProfile CandidateProfile @relation(fields: [candidateprofileid], references: [id])
}

model ApplicationForJobOffer {
  id                 Int     @id @default(autoincrement())
  message            String?
  status             String
  candidateprofileid Int
  jobofferid         Int
  cvid               Int

  candidateProfile CandidateProfile @relation(fields: [candidateprofileid], references: [id])
  jobOffer         JobOffer         @relation(fields: [jobofferid], references: [id])
  candidateCV      CandidateCV      @relation("GeneratedCV", fields: [cvid], references: [id])
  response         ApplicationResponse?
  answers          CandidateAnswer[]
  meetings         Meeting[]
}

model ApplicationResponse {
  applicationforjobofferid Int @id
  response                 String?

  application ApplicationForJobOffer @relation(fields: [applicationforjobofferid], references: [id])
}

model CandidateAnswer {
  applicationforjobofferid Int
  recruitmentquestionid    Int
  answer                   String?

  application ApplicationForJobOffer @relation(fields: [applicationforjobofferid], references: [id])
  question     RecruitmentQuestion   @relation(fields: [recruitmentquestionid], references: [id])

  @@id([applicationforjobofferid, recruitmentquestionid])
}

model JobOffer {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  joblevel          String?
  contracttype      String?
  salary            String?
  createdate        DateTime
  expiredate        DateTime
  workingmode       String?
  workload          String?
  responsibilities  String?
  requirements      String?
  whatweoffer       String?
  applicationurl    String?
  lokalizationid    Int
  employerprofileid Int

  employerProfile EmployerProfile @relation(fields: [employerprofileid], references: [id])
  lokalization    Lokalization    @relation(fields: [lokalizationid], references: [id])
  applications    ApplicationForJobOffer[]
  questions       RecruitmentQuestion[]
}

model Lokalization {
  id         Int     @id @default(autoincrement())
  city       String?
  state      String?
  street     String?
  postalcode String?
  latitude   Float?
  longtitude Float?

  jobOffers  JobOffer[]
  employers  LokalizationToEmployerProfile[]
}

model LokalizationToEmployerProfile {
  employerprofile_id Int
  lokalization_id    Int

  employer EmployerProfile @relation(fields: [employerprofile_id], references: [id])
  lokalization Lokalization @relation(fields: [lokalization_id], references: [id])

  @@id([employerprofile_id, lokalization_id])
}

model Meeting {
  id                       Int      @id @default(autoincrement())
  datetime                 DateTime
  type                     String
  contributors             String?
  onlinemeetingurl         String?
  message                  String?
  applicationforjobofferid Int

  application ApplicationForJobOffer @relation(fields: [applicationforjobofferid], references: [id])
}

model ProfileLink {
  id                 Int    @id @default(autoincrement())
  name               String
  url                String
  candidateprofileid Int

  candidateProfile CandidateProfile @relation(fields: [candidateprofileid], references: [id])
}

model RecruitmentQuestion {
  id         Int    @id @default(autoincrement())
  question   String?
  jobofferid Int

  jobOffer JobOffer @relation(fields: [jobofferid], references: [id])
  answers  CandidateAnswer[]
}
